# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from grpc_gen import pkcs11_pb2 as grpc__gen_dot_pkcs11__pb2


class PKCS11Stub(object):
    """Minimal PKCS#11 interface for signing operations.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.C_SignInit = channel.unary_unary(
                '/PKCS11/C_SignInit',
                request_serializer=grpc__gen_dot_pkcs11__pb2.SignInit.SerializeToString,
                response_deserializer=grpc__gen_dot_pkcs11__pb2.SignInitResponse.FromString,
                )
        self.C_Sign = channel.unary_unary(
                '/PKCS11/C_Sign',
                request_serializer=grpc__gen_dot_pkcs11__pb2.Sign.SerializeToString,
                response_deserializer=grpc__gen_dot_pkcs11__pb2.SignResponse.FromString,
                )


class PKCS11Servicer(object):
    """Minimal PKCS#11 interface for signing operations.
    """

    def C_SignInit(self, request, context):
        """Initialize a signing operation.
        See PKCS #13 Specification Version 3.1 section 5.13.1
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def C_Sign(self, request, context):
        """Sign single part data.
        The signing operation must be initialized with C_SignInit before
        this function is called.
        See PKCS #13 Specification Version 3.1 section 5.13.2
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_PKCS11Servicer_to_server(servicer, server):
    rpc_method_handlers = {
            'C_SignInit': grpc.unary_unary_rpc_method_handler(
                    servicer.C_SignInit,
                    request_deserializer=grpc__gen_dot_pkcs11__pb2.SignInit.FromString,
                    response_serializer=grpc__gen_dot_pkcs11__pb2.SignInitResponse.SerializeToString,
            ),
            'C_Sign': grpc.unary_unary_rpc_method_handler(
                    servicer.C_Sign,
                    request_deserializer=grpc__gen_dot_pkcs11__pb2.Sign.FromString,
                    response_serializer=grpc__gen_dot_pkcs11__pb2.SignResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'PKCS11', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class PKCS11(object):
    """Minimal PKCS#11 interface for signing operations.
    """

    @staticmethod
    def C_SignInit(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/PKCS11/C_SignInit',
            grpc__gen_dot_pkcs11__pb2.SignInit.SerializeToString,
            grpc__gen_dot_pkcs11__pb2.SignInitResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def C_Sign(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/PKCS11/C_Sign',
            grpc__gen_dot_pkcs11__pb2.Sign.SerializeToString,
            grpc__gen_dot_pkcs11__pb2.SignResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
